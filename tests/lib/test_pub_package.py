import sublime

from tempfile import TemporaryDirectory
from tempfile import NamedTemporaryFile
from unittest import mock
import os
import unittest

from Dart.lib.pub_package import PubspecFile
from Dart.lib.pub_package import PubPackage
from Dart.lib.pub_package import DartView


VALID_PUBSPEC_CONTENT = '''name: foo
version: 0.10
'''

VALID_PUBSPEC_LOCK_CONTENT = '''# Generated by pub
# See http://pub.dartlang.org/doc/glossary.html#lockfile
packages: {}
'''

def make_package(pubspec=True, dirs=['web']):
    d = TemporaryDirectory()
    if pubspec:
        ps = os.path.join(d.name, 'pubspec.yaml')
        with open(ps, 'w'):
            pass
    for subdir in dirs:
        os.mkdir(os.path.join(d.name, subdir))
    return pubspec, d


class Test_PubspecFile(unittest.TestCase):
    def testInitCanFail(self):
        p = PubspecFile.from_path('???')
        self.assertEqual(p, None)

    def testInitCanSucceed(self):
        with TemporaryDirectory() as d:
            fname = os.path.join(d, 'pubspec.yaml')
            with open(fname, 'wt') as f:
                f.write(VALID_PUBSPEC_CONTENT)
            p = PubspecFile.from_path(fname)
            self.assertEqual(fname, p.path)

    def testCanFindParent(self):
        with TemporaryDirectory() as d:
            fname = os.path.join(d, 'pubspec.yaml')
            with open(fname, 'wt') as f:
                f.write(VALID_PUBSPEC_CONTENT)
            p = PubspecFile.from_path(fname)
            self.assertEqual(d, p.parent)

    def testCanFailToRetrievePubspecLock(self):
        with TemporaryDirectory() as d:
            fname = os.path.join(d, 'pubspec.yaml')
            with open(fname, 'wt') as f:
                f.write(VALID_PUBSPEC_CONTENT)
            p = PubspecFile.from_path(fname)
            self.assertEqual(None, p.get_pubspec_lock())

    def testCanRetrievePubspecLock(self):
        with TemporaryDirectory() as d:
            pubspec_fname = os.path.join(d, 'pubspec.yaml')

            with open(pubspec_fname, 'wt') as f:
                f.write(VALID_PUBSPEC_CONTENT)

            pubspec_lock_fname = os.path.join(d, 'pubspec.lock')
            with open(pubspec_lock_fname, 'wt') as f:
                f.write(VALID_PUBSPEC_LOCK_CONTENT)

            p = PubspecFile.from_path(pubspec_fname)
            self.assertEqual(pubspec_lock_fname, p.get_pubspec_lock().path)


class Test_PubPackage(unittest.TestCase):
    def setUp(self):
        self.d = TemporaryDirectory()
        fname = os.path.join(self.d.name, 'pubspec.yaml')
        with open(fname, 'wt') as f:
            f.write(VALID_PUBSPEC_CONTENT)
        self.pubspec = PubspecFile.from_path(fname)
        self.pub_package = PubPackage(self.pubspec)

    def tearDown(self):
        self.d.cleanup()

    def testInitCanFail(self):
        p = PubPackage.from_path('???')
        self.assertEqual(p, None)

    def testInitCanSucceed(self):
        p = PubPackage.from_path(self.d.name)
        self.assertEqual(self.d.name, p.pubspec.parent)

    def testCanMakeTopLevelDir(self):
        self.assertFalse(os.path.exists(os.path.join(self.d.name, 'web')))
        self.pub_package.make_top_level_dir('web')
        self.assertTrue(os.path.exists(os.path.join(self.d.name, 'web')))

    def test_is_prefix_RaisesExceptionIfPrefixIsNone(self):
        self.assertRaises(AssertionError, self.pub_package.is_prefix, None, 'bar')

    def test_is_prefix_RaisesExceptionIfPathIsNone(self):
        self.assertRaises(AssertionError, self.pub_package.is_prefix, 'foo', None)

    def test_is_prefix_RaisesExceptionIfPathAndPrefixAreNone(self):
        self.assertRaises(AssertionError, self.pub_package.is_prefix, None, None)

    def test_is_prefix_ReturnsFalseIfPathIsNotPrefixed(self):
        self.assertFalse(self.pub_package.is_prefix('foo', 'bar'))

    def test_is_prefix_ReturnsTrueIfPathIsPrefixed(self):
        # TODO(guillermooo): Perhaps this should return false; we probably want to know
        # whether 'path' is a subdir of 'prefix', not just a suffix.
        self.assertTrue(self.pub_package.is_prefix('foo', 'foobar'))

    def test_is_prefix_ReturnsTrueIfPathIsSubdirOfPrefix(self):
        # TODO(guillermooo): Perhaps this should return false; we probably want to know
        # whether 'path' is a subdir of 'prefix', not just a suffix.
        prefix = os.path.join('foo', 'bar')
        path = os.path.join('foo', 'bar', 'baz')
        self.assertTrue(self.pub_package.is_prefix(prefix, path))

    def test__get_top_level_dir_ReturnsNoneIfPathDoesNotExist(self):
        self.assertEqual(self.pub_package._get_top_level_dir('web'), None)

    def test__get_top_level_dir_CanSucceed(self):
        self.pub_package.make_top_level_dir('web')
        self.assertTrue(os.path.exists(os.path.join(self.pub_package.pubspec.parent, 'web')))

    def testKnowsAboutWellKnownPaths(self):
        self.pub_package.make_top_level_dir('web')
        self.pub_package.make_top_level_dir('bin')
        self.pub_package.make_top_level_dir('test')
        self.pub_package.make_top_level_dir('tool')
        self.pub_package.make_top_level_dir('benchmark')
        self.pub_package.make_top_level_dir('doc')
        self.pub_package.make_top_level_dir('example')
        self.pub_package.make_top_level_dir('lib')

        self.assertTrue(os.path.exists(self.pub_package.path_to_web))
        self.assertTrue(os.path.exists(self.pub_package.path_to_bin))
        self.assertTrue(os.path.exists(self.pub_package.path_to_test))
        self.assertTrue(os.path.exists(self.pub_package.path_to_tool))
        self.assertTrue(os.path.exists(self.pub_package.path_to_benchmark))
        self.assertTrue(os.path.exists(self.pub_package.path_to_doc))
        self.assertTrue(os.path.exists(self.pub_package.path_to_example))
        self.assertTrue(os.path.exists(self.pub_package.path_to_lib))


class Test_DartView(unittest.TestCase):
    def setUp(self):
        self.v = sublime.active_window().new_file()

    def tearDown(self):
        self.v.close()

    def testCanInit(self):
        dv = DartView(self.v)
        self.assertEqual(dv.view, self.v)

    def test_has_prefix_RaisesAssertionErrorIfCalledWithNone(self):
        dv = DartView(self.v)
        self.assertRaises(AssertionError, dv.has_prefix, None)

    def test_has_prefix_FailsWhenExpected(self):
        f = NamedTemporaryFile(suffix='.dart')
        try:
            view = sublime.active_window().open_file(f.name)
            dv = DartView(view)
            self.assertFalse(dv.has_prefix('?xxx?'))
        finally:
            view.close()

    def test_has_prefix_CanSucceed(self):
        f = NamedTemporaryFile(suffix='.dart')
        try:
            view = sublime.active_window().open_file(f.name)
            dv = DartView(view)
            self.assertTrue(dv.has_prefix(os.path.dirname(f.name)))
        finally:
            view.close()

    def test_is_dart_file_CanSucceed(self):
        f = NamedTemporaryFile(suffix='.dart')
        try:
            view = sublime.active_window().open_file(f.name)
            dv = DartView(view)
            self.assertTrue(dv.is_dart_file)
        finally:
            view.close()

    def test_is_dart_file_FailsWhenExpected(self):
        f = NamedTemporaryFile(suffix='.js')
        try:
            view = sublime.active_window().open_file(f.name)
            dv = DartView(view)
            self.assertFalse(dv.is_dart_file)
        finally:
            view.close()

    def test_is_pubspec_CanSucceed(self):
        with TemporaryDirectory() as d:
            path = os.path.join(d, 'pubspec.yaml')
            with open(path, 'w'):
                pass
            try:
                view = sublime.active_window().open_file(path)
                dv = DartView(view)
                self.assertTrue(dv.is_pubspec)
            finally:
                view.close()

    def test_is_pubspec_FailsWhenExpected(self):
        f = NamedTemporaryFile(suffix='.js')
        try:
            view = sublime.active_window().open_file(f.name)
            dv = DartView(view)
            self.assertFalse(dv.is_pubspec)
        finally:
            view.close()

    def test_is_example_CanSucceed(self):
        ps, d = make_package(dirs=['example'])
        fname = os.path.join(d.name, 'example', 'foo.dart')
        with open(fname, 'w'):
            pass
        try:
            view = sublime.active_window().open_file(fname)
            dv = DartView(view)
            self.assertTrue(dv.is_example)
        finally:
            view.close()
        d.cleanup()

    def test_is_example_FailsWhenExpected(self):
        ps, d = make_package(dirs=['bin'])
        fname = os.path.join(d.name, 'bin', 'foo.dart')
        with open(fname, 'w'):
            pass
        try:
            view = sublime.active_window().open_file(fname)
            dv = DartView(view)
            self.assertFalse(dv.is_example)
        finally:
            view.close()
        d.cleanup()

    def test_is_web_app_FailsIfNoPubPackageAvailable(self):
        ps, d = make_package(pubspec=False, dirs=['web'])
        fname = os.path.join(d.name, 'web', 'foo.dart')
        f = open(fname, 'w').close()
        try:
            view = sublime.active_window().open_file(fname)
            dv = DartView(view)
            self.assertFalse(dv.is_web_app)
        finally:
            view.close()
        d.cleanup()

    def test_is_web_app_ReturnsTrueIfFileUnderWeb(self):
        ps, d = make_package(pubspec=True, dirs=['web'])
        fname = os.path.join(d.name, 'web', 'foo.dart')
        f = open(fname, 'w').close()
        try:
            view = sublime.active_window().open_file(fname)
            dv = DartView(view)
            self.assertTrue(dv.is_web_app)
        finally:
            view.close()
        d.cleanup()

    def test_is_web_app_ReturnsTrueIfFileUnderExample(self):
        ps, d = make_package(pubspec=True, dirs=['example'])
        fname = os.path.join(d.name, 'example', 'foo.dart')
        f = open(fname, 'w').close()
        try:
            view = sublime.active_window().open_file(fname)
            dv = DartView(view)
            self.assertTrue(dv.is_web_app)
        finally:
            view.close()
        d.cleanup()

    def test_is_web_app_ReturnsFalseIfFileUnderOtherDirectory(self):
        ps, d = make_package(pubspec=True, dirs=['example', 'bin'])
        fname = os.path.join(d.name, 'bin', 'foo.dart')
        f = open(fname, 'w').close()
        try:
            view = sublime.active_window().open_file(fname)
            dv = DartView(view)
            self.assertFalse(dv.is_web_app)
        finally:
            view.close()
        d.cleanup()

    def test_is_web_app_ReturnsFalseIfWebAndExampleDirsMissing(self):
        ps, d = make_package(pubspec=True, dirs=['doc', 'bin'])
        fname = os.path.join(d.name, 'bin', 'foo.dart')
        f = open(fname, 'w').close()
        try:
            view = sublime.active_window().open_file(fname)
            dv = DartView(view)
            self.assertFalse(dv.is_web_app)
        finally:
            view.close()
        d.cleanup()

    def test_is_web_app_ReturnsFalseIfWebDirMissing(self):
        ps, d = make_package(pubspec=True, dirs=['example', 'bin'])
        fname = os.path.join(d.name, 'bin', 'foo.dart')
        f = open(fname, 'w').close()
        try:
            view = sublime.active_window().open_file(fname)
            dv = DartView(view)
            self.assertFalse(dv.is_web_app)
        finally:
            view.close()
        d.cleanup()
